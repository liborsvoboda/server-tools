{"version":3,"file":"static/js/696.8dec9292.chunk.js","mappings":"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","sources":["screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/Configurations/TiersConfiguration/UpdateTierCredentialsModal.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalBox, Snackbar } from \"mds\";\nimport { CSSObject } from \"styled-components\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  titleIcon?: React.ReactNode;\n  iconColor?: \"default\" | \"delete\" | \"accept\";\n  sx?: CSSObject;\n}\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  wideLimit = true,\n  titleIcon = null,\n  iconColor = \"default\",\n  sx,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar,\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (message === \"\" || (message && message.length < 5)) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <ModalBox\n      onClose={onClose}\n      open={modalOpen}\n      title={title}\n      titleIcon={titleIcon}\n      widthLimit={wideLimit}\n      sx={sx}\n      iconColor={iconColor}\n    >\n      <MainError isModal={true} />\n      <Snackbar\n        onClose={closeSnackBar}\n        open={openSnackbar}\n        message={message}\n        mode={\"inline\"}\n        variant={modalSnackMessage.type === \"error\" ? \"error\" : \"default\"}\n        autoHideDuration={modalSnackMessage.type === \"error\" ? 10 : 5}\n        condensed\n      />\n      {children}\n    </ModalBox>\n  );\n};\n\nexport default ModalWrapper;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport {\n  Button,\n  FileSelector,\n  FormLayout,\n  Grid,\n  InputBox,\n  LockIcon,\n  ProgressBar,\n} from \"mds\";\nimport { Tier } from \"api/consoleApi\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\n\ninterface ITierCredentialsModal {\n  open: boolean;\n  closeModalAndRefresh: (refresh: boolean) => any;\n  tierData: Tier;\n}\n\nconst UpdateTierCredentialsModal = ({\n  open,\n  closeModalAndRefresh,\n  tierData,\n}: ITierCredentialsModal) => {\n  const dispatch = useAppDispatch();\n  const [savingTiers, setSavingTiers] = useState<boolean>(false);\n  const [creds, setCreds] = useState<string>(\"\");\n  const [encodedCreds, setEncodedCreds] = useState<string>(\"\");\n\n  const [accountName, setAccountName] = useState<string>(\"\");\n  const [accountKey, setAccountKey] = useState<string>(\"\");\n\n  // Validations\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n\n  const type = get(tierData, \"type\", \"\");\n  const name = get(tierData, `${type}.name`, \"\");\n\n  useEffect(() => {\n    let valid = true;\n\n    if (type === \"s3\" || type === \"azure\" || type === \"minio\") {\n      if (accountName === \"\" || accountKey === \"\") {\n        valid = false;\n      }\n    } else if (type === \"gcs\") {\n      if (encodedCreds === \"\") {\n        valid = false;\n      }\n    }\n    setIsFormValid(valid);\n  }, [accountKey, accountName, encodedCreds, type]);\n\n  const addRecord = () => {\n    let rules = {};\n\n    if (type === \"s3\" || type === \"azure\" || type === \"minio\") {\n      rules = {\n        access_key: accountName,\n        secret_key: accountKey,\n      };\n    } else if (type === \"gcs\") {\n      rules = {\n        creds: encodedCreds,\n      };\n    }\n    if (name !== \"\") {\n      api.admin\n        .editTierCredentials(\n          type as \"azure\" | \"s3\" | \"minio\" | \"gcs\",\n          name,\n          rules,\n        )\n        .then(() => {\n          setSavingTiers(false);\n          closeModalAndRefresh(true);\n        })\n        .catch((err) => {\n          setSavingTiers(false);\n          dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n        });\n    } else {\n      setModalErrorSnackMessage({\n        errorMessage: \"There was an error retrieving tier information\",\n        detailedError: \"\",\n      });\n    }\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      titleIcon={<LockIcon />}\n      onClose={() => {\n        closeModalAndRefresh(false);\n      }}\n      title={`Update Credentials - ${type} / ${name}`}\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          setSavingTiers(true);\n          addRecord();\n        }}\n      >\n        <FormLayout withBorders={false} containerPadding={false}>\n          {(type === \"s3\" || type === \"minio\") && (\n            <Fragment>\n              <InputBox\n                id=\"accessKey\"\n                name=\"accessKey\"\n                label=\"Access Key\"\n                placeholder=\"Enter Access Key\"\n                value={accountName}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setAccountName(e.target.value);\n                }}\n              />\n              <InputBox\n                id=\"secretKey\"\n                name=\"secretKey\"\n                label=\"Secret Key\"\n                placeholder=\"Enter Secret Key\"\n                value={accountKey}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setAccountKey(e.target.value);\n                }}\n              />\n            </Fragment>\n          )}\n          {type === \"gcs\" && (\n            <Fragment>\n              <FileSelector\n                accept=\".json\"\n                id=\"creds\"\n                label=\"Credentials\"\n                name=\"creds\"\n                returnEncodedData\n                onChange={(_, fileName, encodedValue) => {\n                  if (encodedValue) {\n                    setEncodedCreds(encodedValue);\n                    setCreds(fileName);\n                  }\n                }}\n                value={creds}\n              />\n            </Fragment>\n          )}\n          {type === \"azure\" && (\n            <Fragment>\n              <InputBox\n                id=\"accountName\"\n                name=\"accountName\"\n                label=\"Account Name\"\n                placeholder=\"Enter Account Name\"\n                value={accountName}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setAccountName(e.target.value);\n                }}\n              />\n              <InputBox\n                id=\"accountKey\"\n                name=\"accountKey\"\n                label=\"Account Key\"\n                placeholder=\"Enter Account Key\"\n                value={accountKey}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setAccountKey(e.target.value);\n                }}\n              />\n            </Fragment>\n          )}\n        </FormLayout>\n        {savingTiers && (\n          <Grid item xs={12}>\n            <ProgressBar />\n          </Grid>\n        )}\n        <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n          <Button\n            id={\"save-credentials\"}\n            type=\"submit\"\n            variant=\"callAction\"\n            disabled={savingTiers || !isFormValid}\n            label={\"Save\"}\n          />\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nexport default UpdateTierCredentialsModal;\n"],"names":["_ref","onClose","modalOpen","title","children","wideLimit","titleIcon","iconColor","sx","dispatch","useAppDispatch","openSnackbar","setOpenSnackbar","useState","modalSnackMessage","useSelector","state","system","modalSnackBar","useEffect","setModalSnackMessage","message","type","detailedErrorMsg","length","_jsxs","ModalBox","open","widthLimit","_jsx","MainError","isModal","Snackbar","closeSnackBar","mode","variant","autoHideDuration","condensed","closeModalAndRefresh","tierData","savingTiers","setSavingTiers","creds","setCreds","encodedCreds","setEncodedCreds","accountName","setAccountName","accountKey","setAccountKey","isFormValid","setIsFormValid","get","name","concat","valid","ModalWrapper","LockIcon","noValidate","autoComplete","onSubmit","e","preventDefault","addRecord","rules","access_key","secret_key","api","admin","editTierCredentials","then","catch","err","setModalErrorSnackMessage","errorToHandler","error","errorMessage","detailedError","FormLayout","withBorders","containerPadding","Fragment","InputBox","id","label","placeholder","value","onChange","target","FileSelector","accept","returnEncodedData","_","fileName","encodedValue","Grid","item","xs","ProgressBar","modalStyleUtils","modalButtonBar","Button","disabled"],"sourceRoot":""}