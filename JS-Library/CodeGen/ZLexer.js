// Generated from D:/a/antlr4-code-generation-action/antlr4-code-generation-action/ZLexer.g4 by ANTLR 4.12.0
// jshint ignore: start
import antlr4 from "https://cdn.jsdelivr.net/npm/antlr4@4.12.0/dist/antlr4.web.js";

const serializedATN = [4,0,44,307,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,1,0,1,0,1,0,1,0,5,0,
100,8,0,10,0,12,0,103,9,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,114,8,
1,10,1,12,1,117,9,1,1,1,1,1,1,2,3,2,122,8,2,1,2,1,2,1,2,1,2,1,3,4,3,129,
8,3,11,3,12,3,130,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,
1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,
22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,
1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,
31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,
1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,
36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,
1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,5,40,256,8,40,10,40,12,40,259,9,
40,3,40,261,8,40,1,41,1,41,5,41,265,8,41,10,41,12,41,268,9,41,1,41,1,41,
4,41,272,8,41,11,41,12,41,273,1,42,1,42,3,42,278,8,42,1,42,1,42,1,43,4,43,
283,8,43,11,43,12,43,284,1,44,1,44,1,44,1,44,1,44,3,44,292,8,44,1,45,1,45,
1,45,1,46,5,46,298,8,46,10,46,12,46,301,9,46,1,46,4,46,304,8,46,11,46,12,
46,305,1,101,0,47,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,0,89,0,91,0,93,44,1,0,8,
2,0,10,10,13,13,2,0,9,9,32,32,1,0,49,57,1,0,48,57,4,0,10,10,13,13,34,34,
92,92,10,0,34,34,39,39,63,63,92,92,97,98,102,102,110,110,114,114,116,116,
118,118,1,0,95,95,4,0,48,57,65,90,95,95,97,122,318,0,1,1,0,0,0,0,3,1,0,0,
0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
1,0,0,0,0,85,1,0,0,0,0,93,1,0,0,0,1,95,1,0,0,0,3,109,1,0,0,0,5,121,1,0,0,
0,7,128,1,0,0,0,9,134,1,0,0,0,11,136,1,0,0,0,13,138,1,0,0,0,15,140,1,0,0,
0,17,142,1,0,0,0,19,144,1,0,0,0,21,146,1,0,0,0,23,148,1,0,0,0,25,150,1,0,
0,0,27,152,1,0,0,0,29,154,1,0,0,0,31,156,1,0,0,0,33,158,1,0,0,0,35,160,1,
0,0,0,37,162,1,0,0,0,39,164,1,0,0,0,41,166,1,0,0,0,43,169,1,0,0,0,45,172,
1,0,0,0,47,175,1,0,0,0,49,178,1,0,0,0,51,181,1,0,0,0,53,184,1,0,0,0,55,186,
1,0,0,0,57,188,1,0,0,0,59,192,1,0,0,0,61,196,1,0,0,0,63,202,1,0,0,0,65,209,
1,0,0,0,67,215,1,0,0,0,69,220,1,0,0,0,71,225,1,0,0,0,73,228,1,0,0,0,75,233,
1,0,0,0,77,237,1,0,0,0,79,243,1,0,0,0,81,260,1,0,0,0,83,262,1,0,0,0,85,275,
1,0,0,0,87,282,1,0,0,0,89,291,1,0,0,0,91,293,1,0,0,0,93,299,1,0,0,0,95,96,
5,47,0,0,96,97,5,42,0,0,97,101,1,0,0,0,98,100,9,0,0,0,99,98,1,0,0,0,100,
103,1,0,0,0,101,102,1,0,0,0,101,99,1,0,0,0,102,104,1,0,0,0,103,101,1,0,0,
0,104,105,5,42,0,0,105,106,5,47,0,0,106,107,1,0,0,0,107,108,6,0,0,0,108,
2,1,0,0,0,109,110,5,47,0,0,110,111,5,47,0,0,111,115,1,0,0,0,112,114,8,0,
0,0,113,112,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,
118,1,0,0,0,117,115,1,0,0,0,118,119,6,1,0,0,119,4,1,0,0,0,120,122,5,13,0,
0,121,120,1,0,0,0,121,122,1,0,0,0,122,123,1,0,0,0,123,124,5,10,0,0,124,125,
1,0,0,0,125,126,6,2,0,0,126,6,1,0,0,0,127,129,7,1,0,0,128,127,1,0,0,0,129,
130,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,132,1,0,0,0,132,133,6,3,
0,0,133,8,1,0,0,0,134,135,5,59,0,0,135,10,1,0,0,0,136,137,5,40,0,0,137,12,
1,0,0,0,138,139,5,41,0,0,139,14,1,0,0,0,140,141,5,123,0,0,141,16,1,0,0,0,
142,143,5,125,0,0,143,18,1,0,0,0,144,145,5,44,0,0,145,20,1,0,0,0,146,147,
5,61,0,0,147,22,1,0,0,0,148,149,5,46,0,0,149,24,1,0,0,0,150,151,5,45,0,0,
151,26,1,0,0,0,152,153,5,126,0,0,153,28,1,0,0,0,154,155,5,42,0,0,155,30,
1,0,0,0,156,157,5,47,0,0,157,32,1,0,0,0,158,159,5,37,0,0,159,34,1,0,0,0,
160,161,5,43,0,0,161,36,1,0,0,0,162,163,5,60,0,0,163,38,1,0,0,0,164,165,
5,62,0,0,165,40,1,0,0,0,166,167,5,60,0,0,167,168,5,61,0,0,168,42,1,0,0,0,
169,170,5,62,0,0,170,171,5,61,0,0,171,44,1,0,0,0,172,173,5,38,0,0,173,174,
5,38,0,0,174,46,1,0,0,0,175,176,5,124,0,0,176,177,5,124,0,0,177,48,1,0,0,
0,178,179,5,61,0,0,179,180,5,61,0,0,180,50,1,0,0,0,181,182,5,33,0,0,182,
183,5,61,0,0,183,52,1,0,0,0,184,185,5,33,0,0,185,54,1,0,0,0,186,187,5,58,
0,0,187,56,1,0,0,0,188,189,5,118,0,0,189,190,5,97,0,0,190,191,5,114,0,0,
191,58,1,0,0,0,192,193,5,102,0,0,193,194,5,117,0,0,194,195,5,110,0,0,195,
60,1,0,0,0,196,197,5,99,0,0,197,198,5,108,0,0,198,199,5,97,0,0,199,200,5,
115,0,0,200,201,5,115,0,0,201,62,1,0,0,0,202,203,5,114,0,0,203,204,5,101,
0,0,204,205,5,116,0,0,205,206,5,117,0,0,206,207,5,114,0,0,207,208,5,110,
0,0,208,64,1,0,0,0,209,210,5,102,0,0,210,211,5,97,0,0,211,212,5,108,0,0,
212,213,5,115,0,0,213,214,5,101,0,0,214,66,1,0,0,0,215,216,5,116,0,0,216,
217,5,114,0,0,217,218,5,117,0,0,218,219,5,101,0,0,219,68,1,0,0,0,220,221,
5,110,0,0,221,222,5,117,0,0,222,223,5,108,0,0,223,224,5,108,0,0,224,70,1,
0,0,0,225,226,5,105,0,0,226,227,5,102,0,0,227,72,1,0,0,0,228,229,5,101,0,
0,229,230,5,108,0,0,230,231,5,115,0,0,231,232,5,101,0,0,232,74,1,0,0,0,233,
234,5,102,0,0,234,235,5,111,0,0,235,236,5,114,0,0,236,76,1,0,0,0,237,238,
5,98,0,0,238,239,5,114,0,0,239,240,5,101,0,0,240,241,5,97,0,0,241,242,5,
107,0,0,242,78,1,0,0,0,243,244,5,99,0,0,244,245,5,111,0,0,245,246,5,110,
0,0,246,247,5,116,0,0,247,248,5,105,0,0,248,249,5,110,0,0,249,250,5,117,
0,0,250,251,5,101,0,0,251,80,1,0,0,0,252,261,5,48,0,0,253,257,7,2,0,0,254,
256,7,3,0,0,255,254,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,1,0,
0,0,258,261,1,0,0,0,259,257,1,0,0,0,260,252,1,0,0,0,260,253,1,0,0,0,261,
82,1,0,0,0,262,266,7,3,0,0,263,265,7,3,0,0,264,263,1,0,0,0,265,268,1,0,0,
0,266,264,1,0,0,0,266,267,1,0,0,0,267,269,1,0,0,0,268,266,1,0,0,0,269,271,
5,46,0,0,270,272,7,3,0,0,271,270,1,0,0,0,272,273,1,0,0,0,273,271,1,0,0,0,
273,274,1,0,0,0,274,84,1,0,0,0,275,277,5,34,0,0,276,278,3,87,43,0,277,276,
1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,279,280,5,34,0,0,280,86,1,0,0,0,
281,283,3,89,44,0,282,281,1,0,0,0,283,284,1,0,0,0,284,282,1,0,0,0,284,285,
1,0,0,0,285,88,1,0,0,0,286,292,8,4,0,0,287,292,3,91,45,0,288,292,5,10,0,
0,289,290,5,13,0,0,290,292,5,10,0,0,291,286,1,0,0,0,291,287,1,0,0,0,291,
288,1,0,0,0,291,289,1,0,0,0,292,90,1,0,0,0,293,294,5,92,0,0,294,295,7,5,
0,0,295,92,1,0,0,0,296,298,7,6,0,0,297,296,1,0,0,0,298,301,1,0,0,0,299,297,
1,0,0,0,299,300,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,302,304,7,7,0,0,
303,302,1,0,0,0,304,305,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,94,1,
0,0,0,14,0,101,115,121,130,257,260,266,273,277,284,291,299,305,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class ZLexer extends antlr4.Lexer {

    static grammarFileName = "ZLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, null, null, null, "';'", "'('", "')'", 
                         "'{'", "'}'", "','", "'='", "'.'", "'-'", "'~'", 
                         "'*'", "'/'", "'%'", "'+'", "'<'", "'>'", "'<='", 
                         "'>='", "'&&'", "'||'", "'=='", "'!='", "'!'", 
                         "':'", "'var'", "'fun'", "'class'", "'return'", 
                         "'false'", "'true'", "'null'", "'if'", "'else'", 
                         "'for'", "'break'", "'continue'" ];
	static symbolicNames = [ null, "BlockComment", "LineComment", "NEWLINE", 
                          "WS", "SEMICOL", "LPAREN", "RPAREN", "LCURLY", 
                          "RCURLY", "COMMA", "EQ", "DOT", "MINUS", "TILDE", 
                          "STAR", "DIV", "MOD", "PLUS", "LT", "GT", "LTE", 
                          "GTE", "AND", "OR", "CMP_EQ", "CMP_NE", "EX", 
                          "DOUBLE_DOT", "VAR", "FUN", "CLASS", "RET", "FALSE_", 
                          "TRUE_", "NULL_", "IF", "ELSE", "FOR", "BREAK", 
                          "CONTINUE", "INT", "DECIMAL", "STRING", "IDENT" ];
	static ruleNames = [ "BlockComment", "LineComment", "NEWLINE", "WS", "SEMICOL", 
                      "LPAREN", "RPAREN", "LCURLY", "RCURLY", "COMMA", "EQ", 
                      "DOT", "MINUS", "TILDE", "STAR", "DIV", "MOD", "PLUS", 
                      "LT", "GT", "LTE", "GTE", "AND", "OR", "CMP_EQ", "CMP_NE", 
                      "EX", "DOUBLE_DOT", "VAR", "FUN", "CLASS", "RET", 
                      "FALSE_", "TRUE_", "NULL_", "IF", "ELSE", "FOR", "BREAK", 
                      "CONTINUE", "INT", "DECIMAL", "STRING", "SCharSequence", 
                      "SChar", "EscapeSequence", "IDENT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

ZLexer.EOF = antlr4.Token.EOF;
ZLexer.BlockComment = 1;
ZLexer.LineComment = 2;
ZLexer.NEWLINE = 3;
ZLexer.WS = 4;
ZLexer.SEMICOL = 5;
ZLexer.LPAREN = 6;
ZLexer.RPAREN = 7;
ZLexer.LCURLY = 8;
ZLexer.RCURLY = 9;
ZLexer.COMMA = 10;
ZLexer.EQ = 11;
ZLexer.DOT = 12;
ZLexer.MINUS = 13;
ZLexer.TILDE = 14;
ZLexer.STAR = 15;
ZLexer.DIV = 16;
ZLexer.MOD = 17;
ZLexer.PLUS = 18;
ZLexer.LT = 19;
ZLexer.GT = 20;
ZLexer.LTE = 21;
ZLexer.GTE = 22;
ZLexer.AND = 23;
ZLexer.OR = 24;
ZLexer.CMP_EQ = 25;
ZLexer.CMP_NE = 26;
ZLexer.EX = 27;
ZLexer.DOUBLE_DOT = 28;
ZLexer.VAR = 29;
ZLexer.FUN = 30;
ZLexer.CLASS = 31;
ZLexer.RET = 32;
ZLexer.FALSE_ = 33;
ZLexer.TRUE_ = 34;
ZLexer.NULL_ = 35;
ZLexer.IF = 36;
ZLexer.ELSE = 37;
ZLexer.FOR = 38;
ZLexer.BREAK = 39;
ZLexer.CONTINUE = 40;
ZLexer.INT = 41;
ZLexer.DECIMAL = 42;
ZLexer.STRING = 43;
ZLexer.IDENT = 44;



