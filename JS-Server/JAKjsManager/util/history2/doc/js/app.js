var H2Demo = JAK.ClassMaker.makeClass({	NAME: 'H2Demo',	IMPLEMENT: [JAK.ISignals, JAK.History2.IProcessor]});/* implementace metody rozhrani JAK.History2.IProcessor * str - hodnota z URL  * analyzuje string a vyrobi z nej objekt reprezentujici stav JS aplikace */H2Demo.prototype.parse = function(str) {		var state = {};		str = str.substr(this._appPath.length);		str = str.match(/^\/*(.*?)\/*$/)[1]; //trim "/"		var parts = str.split('/');		state.type = parts[0];	state.key = parts[1];		return this._normalizeState(state);}/* implementace metody rozhrani JAK.History2.IProcessor, inverzni k metode "parse" * state - objekt reprezentujici stav JS aplikace * z objektu vyrobi string, ktery se bude ukladat do URL */H2Demo.prototype.serialize = function(state) {	var str = this._appPath;	if (state.key) {		str += state.type + '/' + state.key;	}	return str;}H2Demo.prototype.$constructor = function(appPath, characters) {	this._characters = characters;	this._appPath = appPath || '/'; //pro history2 procesor (parse, serialize)	this._dom = {		menu: JAK.gel('menu'),		charName: JAK.query('.name', JAK.gel('demoContent'))[0],		charImg: JAK.query('.imgPH', JAK.gel('demoContent'))[0],		log: JAK.gel('log'),		logBody: JAK.gel('logBody')	};		this._appState = this._normalizeState({}); //defaultni stav aplikace - z tengu nebo odnekud sem muzou prijit uz nejake nastavene hodnoty	this._actCharacter = {}; //aktualni vybrana postavicka	this._changeByUser = false; //priznak - zda posledni zmena dat byla zpusobena akci uzivatele na strance nebo zmenou v URL	//nastaveni utility JAK.History2:	JAK.History2.config.processor = this;			//objekt implementujici metody parse, serialize	JAK.History2.config.iframeSrc = '_blank.html';	//trik pro IE7-, aby ukladal do historie i zmenu hashe, vhodne nastavit na prazdnou stranu nebo maly obrazek (neco statickeho)	this._history2 = JAK.History2.getInstance();	//vytvoreni utility JAK.History2		this.addListener('history-change', '_sig_historyChange', this._history2);	//nastaveni posluchace na signal o zmene v URL		JAK.Events.addListener(JAK.gel('menu'), 'click', this, '_ev_menuClick');	JAK.Events.addListener(JAK.gel('resetLog'), 'click', this, '_ev_resetLog');		this._startUpCheckHash(); //pri 1. nacteni stranky kontrolujeme vzdy hodnotu v hashi}/* Kontrola url hashe pri 1.nacteni stranky, jestli stav v nem odpovida stavu v aplikaci. * Pokud ne, meli bychom aktualizovat stav a data podle hashe. */H2Demo.prototype._startUpCheckHash = function() {	//v hashi neco je -> ziskat data a porovnat je s vychozim stavem:				if ( this._history2.isHash() ) {		var stateHash = this._history2.get();				//rozdilny stav		if ( this._isDifferentState(this._appState, stateHash) ) {			this._log('<strong>Startup hash check</strong>: new data in hash!');			this._loadChar(stateHash);		}	}}/* zmenila se historie - uzivatel zmackl v prohlizeci tlacitko zpet/vpred */H2Demo.prototype._sig_historyChange = function(sig) {	this._changeByUser = false;		this._log('Signal <strong>history change</strong>.');		//novy stav v url?	if (this._isDifferentState(sig.data.state, this._appState)) {		this._loadChar(sig.data.state);	} else {		this._log('<hr />');	}}/* akce uzivatele - klik do menu */H2Demo.prototype._ev_menuClick = function(e,elm) {	var target = JAK.Events.getTarget(e);	if (target.tagName.toLowerCase() == 'a') {		JAK.Events.cancelDef(e);				var key = target.getAttribute('data-key');		this._userAction('charChange', key);				return;	}}/* uzivatel provedl na strance nejakou akci, ktera by se mela promitnout do URL; * podle zadane akce zavolame nejakou obsluznou metodu, ktera provede zmenu ve strance */H2Demo.prototype._userAction = function(action, data) {	this._changeByUser = true;	switch(action) {		case 'charChange':					var state = {};			if (this._characters[data]) {				state = {					key:  data,					type: this._characters[data].type								}			}			state = this._normalizeState(state);						this._log("<strong>User action</strong>: change character (\"" + state.key + "\")");						this._loadChar(state);			break;				default:			break;	}}/* ukonceni nejakych zmen na strance - pokud byly vyvolany uzivatelem, promitne se to do URL */H2Demo.prototype._actionEnd = function() {	if (this._changeByUser) {		this._log("<strong>Save to url</strong>: "+this._history2.serializeState(this._appState));		this._history2.save(this._appState);	} 	this._log("<hr/>");}/* zmena ve strance - nacteni nove postavicky */H2Demo.prototype._loadChar = function(state) {	this._appState = state;	this._actCharacter = this._characters[state.key] || {};		this._log("Load character, name: " + this._actCharacter.name);		//menu:	var elms = JAK.query('li a', this._dom.menu);	var activeKey = (this._appState.key in this._characters)? this._appState.key : '';	for (var i = 0; i < elms.length; i++) {		var active = elms[i].getAttribute('data-key') === activeKey;		if (active) {			JAK.DOM.addClass(elms[i], 'active');		} else {			JAK.DOM.removeClass(elms[i], 'active');		}	}		//demoContent:	var html = '&ndash;';	if (this._actCharacter.name) {		html = this._actCharacter.name + ' (' + this._actCharacter.type + ') - ' + this._actCharacter.job;	}	this._dom.charName.innerHTML = html;		var html = '';	if (this._actCharacter.img) {		html = '<img src="' + this._actCharacter.img + '" alt="' + this._actCharacter.name + '" />';	}	this._dom.charImg.innerHTML = html;			this._actionEnd();}/* pomocna funkce, porovnava 2 objekty se stavy aplikace */H2Demo.prototype._isDifferentState = function(st1, st2) {	for (var i in st1) {		if (st1[i] != st2[i]) {			return true;			break;		}	}	return false;	}/* pomocna funkce, normalizuje stav (doplnuje chybejici parametry, defaultni hodnoty) */H2Demo.prototype._normalizeState = function(state) {	var n_state = {};		n_state.key = state.key? state.key : '';	n_state.type = state.type? state.type : (state.key? 'notype' : '');		return n_state;}/* logovani, co se deje */H2Demo.prototype._log = function(text) {	var line = JAK.mel('div', {innerHTML: text});	this._dom.logBody.appendChild(line);		this._dom.log.scrollTop = this._dom.log.scrollHeight;}H2Demo.prototype._ev_resetLog = function(e) {	JAK.Events.cancelDef(e);	JAK.DOM.clear(this._dom.logBody);}